#!/usr/bin/env python

"""A tool to synchronize the *politico* database with GovTrack.us."""

import logging
import requests
import urlparse
import urllib


logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)


def build_url(resource, query_params):
  """Build a GovTrack.us API url.

  :param resource: The resource path to get, e.g., /api/v2/role or
    /api/v2/person.
  :param query_params: The query parameters as a :class:`dict` to encode with
    :func:`urllib.urlencode`.

  """
  query = urllib.urlencode(query_params)
  return urlparse.urlunparse((
    'https',
    'www.govtrack.us',
    resource,
    None,
    query,
    None,
  ))


def get_objects(resource):
  """Get all of a GovTrack.us resource.

  :param resource: The resource path to get, e.g., /api/v2/role or
    /api/v2/person.

  """
  url = build_url(resource, {'current': 'true', 'limit': 100})
  rsp = requests.get(url)
  for obj in rsp.json()['objects']:
    yield obj
  meta = rsp.json()['meta']
  offset = meta['limit'] + meta['offset']
  while offset <= meta['total_count']:
    offset += meta['limit']
    url = build_url(resource, {'current': 'true', 'limit': 100, 'offset': offset})
    rsp = requests.get(url)
    for obj in rsp.json()['objects']:
      yield obj


def main():
  for role in get_objects('/api/v2/role'):
    # TODO: sort this information into the models that we have in
    # politico.model..
    print
    print role
    print
    print role['person']
    print
    break


if __name__ == '__main__':
  main()
