#!/usr/bin/env python

"""A tool to synchronize the *politico* database with GovTrack.us.

This currently means collecting all of the persons (representatives and
senators) that are participating in currently.

"""

import logging
import requests
import urlparse
import urllib

import sqlalchemy

from politico import init_webapp
from politico.model import db, Person, Role, TwitterProfile


logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)


def build_url(resource, query_params):
  """Build a GovTrack.us API url.

  :param resource: The resource path to get, e.g., /api/v2/role or
    /api/v2/person.
  :param query_params: The query parameters as a :class:`dict` to encode with
    :func:`urllib.urlencode`.

  """
  query = urllib.urlencode(query_params)
  return urlparse.urlunparse((
    'https',
    'www.govtrack.us',
    resource,
    None,
    query,
    None,
  ))


def get_objects(resource):
  """Get all of a current GovTrack.us resource.

  :param resource: The resource path to get, e.g., /api/v2/role or
    /api/v2/person.

  """
  url = build_url(resource, {'current': 'true', 'limit': 100})
  rsp = requests.get(url)
  for obj in rsp.json()['objects']:
    yield obj
  meta = rsp.json()['meta']
  offset = meta['limit'] + meta['offset']
  while offset <= meta['total_count']:
    offset += meta['limit']
    url = build_url(resource, {'current': 'true', 'limit': 100, 'offset': offset})
    rsp = requests.get(url)
    for obj in rsp.json()['objects']:
      yield obj


def main():

  # We really just want to setup the database context!
  init_webapp()

  # The GovTrack.us API returns many more fields than the ones that we
  # pick out here. In the future, it woul d be nice to have more of the fields
  # kept internally to lighten the load on our API requests!
  for role in get_objects('/api/v2/role'):

    person = Person(
      govtrack_id=role['person']['id'],
      osid_id=role['person']['osid'],
      firstname=role['person']['firstname'],
      lastname=role['person']['lastname'],
      twitterid=role['person']['twitterid'],
    )

    current_role = Role(
      govtrack_id=role['id'],
      state=role['state'],
      role_type=role['role_type'],
      start_date=role['startdate'],
      end_date=role['enddate'],
    )

    person.roles.append(current_role)

    db.session.add(person)
    db.session.add(current_role)

    try:
      db.session.commit()
    except sqlalchemy.exc.IntegrityError:
      db.session.rollback()


if __name__ == '__main__':
  main()
